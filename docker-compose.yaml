services:
    primary_db:
        image: postgres
        restart: always
        container_name: primary_db_instance
        ports:
            - "5432:5432"
        networks:
            - db_net
        environment:
            POSTGRES_DB: ${PRIMARY_DB}
            POSTGRES_USER: ${PRIMARY_USER}
            POSTGRES_PASSWORD: ${PRIMARY_PASSWORD}
        volumes:
            - primary_data:/var/lib/postgresql/data
            - ./1_primary_init_repuser.sql:/docker-entrypoint-initdb.d/1_primary_init_repuser.sql
            - ./2_primary_append_pg_hba.sh:/docker-entrypoint-initdb.d/2_primary_append_pg_hba.sh
        healthcheck:
            test: ["CMD", "pg_isready", "-U", primary_username, "-d", "primary_database"]
            interval: 5s
            timeout: 5s
            retries: 3
        command:
            - "postgres"
            - "-c"
            - "max_replication_slots=3"
            - "-c"
            - "max_wal_senders=3"
            - "-c"
            - "wal_level=replica"
            - "-c"
            - "hot_standby=on"
            - "-c"
            - "listen_addresses=*"

    
    standby_db:
        image: postgres
        restart: always
        container_name: standby_db_instance
        ports:
            - "5433:5432"
        networks:
            - db_net
        environment:
            POSTGRES_USER: ${STANDBY_USER}
            POSTGRES_PASSWORD: ${STANDBY_PASSWORD}
        volumes:
            - standby_data:/var/lib/postgresql/data
            - ./1_standby_setup.sh:/docker-entrypoint-initdb.d/1_standby_setup.sh
        command:
            - "postgres"
            - "-c"
            - "wal_level=replica"
            - "-c"
            - "hot_standby=on"
        depends_on:
            primary_db:
                condition: service_healthy


volumes:
    primary_data:
    standby_data:

networks:
    db_net:
        driver: bridge
        ipam:
            config:
                - subnet: 172.22.0.0/16